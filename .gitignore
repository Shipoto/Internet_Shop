# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
#lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
#db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/
# Байт-компилированные/оптимизированные/DLL-файлы __pycache__/ *.py[код] *$py.класс # Расширения C *.так # Распространение/упаковка .Питон строить/ развивать-яйца/ расстояние / загрузок/ яйца/ .яйца/ библиотека/ библиотека64/ части/ срасст/ вар/ колеса/ поделиться/питон-колеса/ *.яйцо-информация/ .установлено.cfg *.яйцо МАНИФЕСТ # PyInstaller # Обычно эти файлы пишутся скриптом python из шаблона # до того, как PyInstaller создаст исполняемый файл, чтобы добавить в него дату/другую информацию. *.манифест *.спецификация # Логи установщика пип-log.txt pip-delete-this-directory.txt # Модульные тесты / отчеты о покрытии htmlcov/ .токс/ .нокс/ .покрытие .покрытие.* .кэш носовые тесты.xml покрытие.xml *.покрытие *.py,обложка .гипотеза/ .pytest_cache/ покрытие/ # Переводы *.мо *.горшок # Материал Джанго: *.журнал local_settings.py db.sqlite3 db.sqlite3-журнал # Фляга: пример/ .webassets-кэш # Парсер: .скрейпи # документация по сфинксу документы/_сборка/ # Пибилдер .pybuilder/ цель/ # Блокнот Юпитер .ipynb_checkpoints # IPython профиль_по умолчанию/ ipython_config.py # пиенв # Для библиотеки или пакета вы можете игнорировать эти файлы, так как код # предназначен для работы в нескольких средах; в противном случае зарегистрируйте их: # .python-версия # пипенв # Согласно pypa/pipenv#598, рекомендуется включать Pipfile.lock в систему контроля версий. # Тем не менее, в случае совместной работы, если есть зависимости от конкретной платформы или зависимости # не имея кросс-платформенной поддержки, pipenv может устанавливать зависимости, которые не работают или не работают # устанавливаем все необходимые зависимости. #Pipfile.lock # поэзия # Как и в случае с Pipfile.lock, обычно рекомендуется включать в систему контроля версий поэзию. # Это особенно рекомендуется для бинарных пакетов, чтобы обеспечить воспроизводимость, и более # обычно игнорируется для библиотек. # https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control #поэзия.замок # пдм # Как и в случае с Pipfile.lock, обычно рекомендуется включать pdm.lock в систему контроля версий. #пдм.замок # pdm хранит конфигурации всего проекта в .pdm.toml, но не рекомендуется его включать # в системе контроля версий. # https://pdm.fming.dev/#use-with-ide .pdm.toml # ПЭП 582; используется, например, github.com/David-OConnor/pyflow и github.com/pdm-project/pdm __pypackages__/ # Сельдерей celerybeat-график celerybeat.pid # файлы, проанализированные SageMath *.sage.py # Среды .env .venv окр/ venv/ ENV/ окр.бак/ venv.bak/ # Настройки проекта Spyder .spyderproject .spyproject # Настройки проекта веревки .ropeproject # документация mkdocs /сайт # mypy .mypy_cache/ .dmypy.json dmypy.json # Проверка типа костра .pyre/ # анализатор статического типа pytype .pytype/ # Символы отладки Cython cython_debug/ # PyCharm # Специальный шаблон JetBrains хранится в отдельном файле JetBrains.gitignore, который может # можно найти по адресу https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore. # и может быть добавлен в глобальный gitignore или объединен в этот файл. Для более ядерной # опция (не рекомендуется) вы можете раскомментировать следующее, чтобы игнорировать всю папку с идеями. #.идея/
